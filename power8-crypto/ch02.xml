<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch02">
  <title>Vector programming</title>
  <para>Polynomial multiplies, AES, SHA-256 and SHA-512 acceleration occurs in the VSX unit. Data must be moved from main memory into a vector register, the data must be transformed, and then data must be written back to main memory. Data is moved to and from main memory using vector loads and stores.</para>
  <para>Several topics need to be discussed to ensure trouble free loads and stores. They include PowerPC compilers and options, Altivec headers, machine endianness, vector datatypes and then finally the loads and stores. It is enough information to get to the point you can use AES and SHA but not much more.</para>
  <section id="power8_compilers">
    <title>PowerPC compilers</title>
    <para>This documents uses two compilers for testing. The first is GCC and the second is IBM XL C/C++. Each compiler is slightly different with its options.</para>
    <para>Compiling a test program with GCC will generally look like below. The important part is <systemitem>-mcpu=power8</systemitem> which selects the POWER8 Instruction Set Architecture (ISA).</para>
    <programlisting>$ g++ -mcpu=power8 test.cxx -o test.exe
</programlisting>
    <para>Complimentary, compiling a test program with IBM XL C/C++ will generally look like below. The important parts are the C++ compiler name of <systemitem>xlC</systemitem>, and <systemitem>-qarch=pwr8</systemitem> which selects the POWER8 ISA.</para>
    <programlisting>$ xlC -qarch=pwr8 -qaltivec test.cxx -o test.exe
</programlisting>
    <para>When compiling source code to examine the quality of code generation the program should be compiled with <systemitem>-O3</systemitem>. Both compilers consume <systemitem>-O3</systemitem>.</para>
  </section>
  <section id="power8_header">
    <title>Altivec headers</title>
    <para>The header required for datatypes and functions is <systemitem>&lt;altivec.h&gt;</systemitem>. To support compiles with a C++ compiler <systemitem>__vector</systemitem> keyword is used rather than <systemitem>vector</systemitem>. A typical Altivec include looks as shown below.</para>
    <programlisting>#if defined(__ALTIVEC__)
# include &lt;altivec.h&gt;
# undef vector
# undef pixel
# undef bool
#endif
</programlisting>
    <para>In addition to <systemitem>__ALTIVEC__</systemitem> preprocessor macro you will see the following defines depending on the platform:</para>
    <itemizedlist mark="bullet">
      <listitem>
        <para><systemitem>__powerpc__</systemitem> and <systemitem>__powerpc</systemitem> on AIX
        </para>
      </listitem>
      <listitem>
        <para><systemitem>__powerpc__</systemitem> and <systemitem>__powerpc64__</systemitem> on Linux
        </para>
      </listitem>
      <listitem>
        <para><systemitem>_ARCH_PWR3</systemitem> through <systemitem>_ARCH_PWR9</systemitem> on AIX and Linux
        </para>
      </listitem>
      <listitem>
        <para><systemitem>__linux__</systemitem>, <systemitem>__linux</systemitem> and <systemitem>linux</systemitem> on Linux
        </para>
      </listitem>
      <listitem>
        <para><systemitem>_AIX</systemitem>, and <systemitem>_AIX32</systemitem> through <systemitem>_AIX72</systemitem> on AIX
        </para>
      </listitem>
    </itemizedlist>
  </section>
  <section id="power8_endianess">
    <title>Machine endianness</title>
    <para>You will experience both little-endian and big-endian machines in the field when working with a modern PowerPC architecture. Linux is generally little-endian, while AIX is big-endian.</para>
    <para>When writing portable source code you should check the value of preprocessor macros <systemitem>__LITTLE_ENDIAN__</systemitem> or <systemitem>__BIG_ENDIAN__</systemitem> to determine the configuration. The value of the macros <systemitem>__BIG_ENDIAN__</systemitem> and <systemitem>__LITTLE_ENDIAN__</systemitem> are defined to non-0 to activate the macro. Source code checking endianness should look similar to the code shown below.</para>
    <programlisting>#if __LITTLE_ENDIAN__
# error "Little-endian system"
#else
# error "Big-endian system"
#endif
</programlisting>
    <para>The compilers can show the endian related preprocessor macros available on a platform. Below is from GCC on <systemitem>gcc112</systemitem> from the <link linkend="cfarm">compile farm</link>, which is ppc64-le.</para>
    <programlisting>$ g++ -dM -E test.cxx | grep -i endian
#define __ORDER_LITTLE_ENDIAN__ 1234
#define _LITTLE_ENDIAN 1
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __ORDER_PDP_ENDIAN__ 3412
#define __LITTLE_ENDIAN__ 1
#define __ORDER_BIG_ENDIAN__ 4321
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
</programlisting>
    <para>And the complimentary view from IBM XL C/C++ on <systemitem>gcc112</systemitem> from the <link linkend="cfarm">compile farm</link>, which is ppc64-le.</para>
    <programlisting>$ xlC -qshowmacros -E test.cxx | grep -i endian
#define _LITTLE_ENDIAN 1
#define __BYTE_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __FLOAT_WORD_ORDER__ __ORDER_LITTLE_ENDIAN__
#define __LITTLE_ENDIAN__ 1
#define __ORDER_BIG_ENDIAN__ 4321
#define __ORDER_LITTLE_ENDIAN__ 1234
#define __ORDER_PDP_ENDIAN__ 3412
#define __VEC_ELEMENT_REG_ORDER__ __ORDER_LITTLE_ENDIAN__
</programlisting>
    <para>However, below is <systemitem>gcc119</systemitem> from the <link linkend="cfarm">compile farm</link>, which is ppc64-be. It runs AIX and notice <systemitem>__BYTE_ORDER__</systemitem>, <systemitem>__ORDER_BIG_ENDIAN__</systemitem> and <systemitem>__ORDER_LITTLE_ENDIAN__</systemitem> are not present.</para>
    <programlisting>$ xlC -qshowmacros -E test.cxx | grep -i endian
#define __BIG_ENDIAN__ 1
#define _BIG_ENDIAN 1
#define __THW_BIG_ENDIAN__ 1
#define __HHW_BIG_ENDIAN__ 1
</programlisting>
  </section>
  <section id="power8_alloc">
    <title>Malloc and new</title>
    <para>The system calls <systemitem>malloc</systemitem> and <systemitem>new</systemitem> (and friends) are used to acquire memory from the heap. The system calls <emphasis>do not</emphasis> guarantee aligment to any particular boundary on all platforms. Linux generally returns a pointer that is at least 16-byte aligned on all platforms, including ARM, PPC, MIPS and x86. AIX does not provide the same alignment behavior.</para>
    <para>To avoid unexpected surprises when using heap allocations you should use <systemitem>posix_memalign</systemitem> to acquire heap memory aligned to a particular boundary.</para>
    <para>TODO: I believe AIX or XLC has another function to call for memory used with vector programming.</para>
  </section>
  <section id="power8_datatypes">
    <title>Vector datatypes</title>
    <para>Three vector datatypes are needed for in-core programming. The three types used for crypto are listed below.</para>
    <itemizedlist mark="bullet">
      <listitem>
        <para>
          <systemitem>__vector unsigned char</systemitem>
        </para>
      </listitem>
      <listitem>
        <para>
          <systemitem>__vector unsigned int</systemitem>
        </para>
      </listitem>
      <listitem>
        <para>
          <systemitem>__vector unsigned long</systemitem>
        </para>
      </listitem>
    </itemizedlist>
    <para><systemitem>__vector unsigned char</systemitem> is 16 each 8-bit bytes, and it is typedef'd as <systemitem>uint8x16_p8</systemitem>. <systemitem>__vector unsigned int</systemitem> is 4 each 32-bit words, and it is typedef'd as <systemitem>uint32x4_p8</systemitem>.</para>
    <para><systemitem>__vector unsigned long</systemitem> is new to POWER8. <systemitem>__vector unsigned long</systemitem> is 2 each 64-bit double words, and it is typedef'd as <systemitem>uint64x2_p8</systemitem>.</para>
  </section>
  <section id="power8_shift">
    <title>Vector shifts</title>
    <para>Altivec shifts and rotates are performed using <emphasis>Vector Shift Left Double by Octet Immediate</emphasis>. The vector shift and rotate built-in is <systemitem>vec_sld</systemitem> and it compiles/assembles to <systemitem>vsldoi</systemitem>.</para>
    <para>Vector shifts and rotates perform as expected on big-endian machines. Both shift and rotate operate on a concatenation of two vectors, and bytes are shifted out on the left and shifted in on the right. The instructions need an integral constant in the range 0 - 15, inclusive.</para>
    <para>Little-endian machines need a special sauce to produce correct results and the <ulink url="https://www.ibm.com/support/knowledgecenter/SSXVZZ_13.1.4/com.ibm.xlcpp1314.lelinux.doc/compiler_ref/vec_sld.html">IBM manuals don't tell you about it</ulink>. If you are like many other developers then you will literally waste hours trying to figure it out the first time it happens.</para>
    <para>The problem is shift and rotates are endian sensitive, and you have to use <systemitem>16-n</systemitem> and swap vector arguments on little-endian systems. The C++ source code provides the following template function to handle the behavior.</para>
    <programlisting>template &lt;unsigned int N, class T&gt;
inline T VectorShiftLeft(const T val1, const T val2)
{
#if __LITTLE_ENDIAN__
    enum {R = (16-N)&amp;0xf};
    return (T)vec_sld((uint8x16_p)val2, (uint8x16_p)val1, R);
#else
    enum {R = N&amp;0xf};
    return (T)vec_sld((uint8x16_p)val1, (uint8x16_p)val2, R);
#endif
}
</programlisting>
    <para>A <systemitem>VectorRoatetLeft</systemitem> would be similar to the code below, if needed. Rotate is a special case of shift where both vector arguments are the same value.</para>
    <programlisting>template &lt;unsigned int N, class T&gt;
inline T VectorShiftLeft(const T val)
{
#if __LITTLE_ENDIAN__
    enum {R = (16-N)&amp;0xf};
    return (T)vec_sld((uint8x16_p)val, (uint8x16_p)val, R);
#else
    enum {R = N&amp;0xf};
    return (T)vec_sld((uint8x16_p)val, (uint8x16_p)val, R);
#endif
}
</programlisting>
  </section>
  <section id="power8_ld_st">
    <title>Loads and stores</title>
    <para>Altivec loads and stores have traditionally been performed using <systemitem>vec_ld</systemitem> and <systemitem>vec_st</systemitem> since at least the POWER4 days in the 1990s. <systemitem>vec_ld</systemitem> and <systemitem>vec_st</systemitem> are sensitive to alignment of the effective memory address. The effective address is the <systemitem>address+offset</systemitem> rounded down or masked to a multiple of 16.</para>
    <para>The effective address used for <systemitem>vec_ld</systemitem> and <systemitem>vec_st</systemitem> must be aligned to a 16-byte boundary or incorrect results will arise. Altivec <emphasis>does not</emphasis> raise a <systemitem>SIGBUS</systemitem>. Instead, the bottom 3 bits of the address are masked-off and then the memory at the effective address is loaded.</para>
    <para>POWER7 introduced unaligned loads and stores that avoid the aligned memory address requirement. The instructions to use for unaligned loads and stores are <systemitem>vec_vsx_ld</systemitem> and <systemitem>vec_vsx_st</systemitem> when using GCC; and <systemitem>vec_xl</systemitem> and <systemitem>vec_xst</systemitem> when using XLC.</para>
    <para>TODO: talk about <systemitem>vec_xl_be</systemitem> when using XLC, and the inline assembly replacement <systemitem>VEC_XL_BE</systemitem> when using GCC.</para>
    <para>TODO: talk about <systemitem>VectorLoad</systemitem> and <systemitem>VectorStore</systemitem> used in the source code.</para>
  </section>
</chapter>
