<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<chapter id="ch09">
  <title>Performance</title>
  <indexterm>
    <primary>Performance</primary>
  </indexterm>
  <indexterm>
    <primary>Benchmark</primary>
  </indexterm>
  <para>This chapter presents benchmarking numbers and discusses some of the issues that affect performance. Benchmarking an application is an art and can be tricky to collect accurate results.</para>
  <section id="perf_powersave">
    <title>Powersave</title>
    <indexterm>
      <primary>powersave</primary>
    </indexterm>
    <indexterm>
      <primary>on-demand</primary>
    </indexterm>
    <indexterm>
      <primary>performance</primary>
    </indexterm>
    <para>Linux desktop systems are usually configured in either <systemitem>on-demand</systemitem> or <systemitem>powersave</systemitem> mode. The configuration is usually a kernel parameter, and the default energy states are usually effcient states that use less power. Before benchmarking you should leave <systemitem>on-demand</systemitem> or <systemitem>powersave</systemitem> mode, and enter a <systemitem>performance</systemitem> state.</para>
    <indexterm>
      <primary>Cryptogams</primary>
    </indexterm>
    <indexterm>
      <primary>Andy Polyakov</primary>
    </indexterm>
    <para>Cryptogams uses a script to enter <systemitem>performance</systemitem> mode for benchmarking but it is not available online. A modified version of Andy's script is available at <ulink url="https://github.com/weidai11/cryptopp/blob/master/TestScripts/governor.sh"><systemitem>governor.sh</systemitem></ulink>. The script changes the scaling frequency using the <systemitem>/sys/devices/system/cpu/cpu*/cpufreq/scaling_governor</systemitem> key (where <systemitem>cpu*</systemitem> is a logical cpu, like <systemitem>cpu0</systemitem>). Below is an example of running the script on a x86_64 Linux system.</para>
    <screen>$ sudo ./governor.sh perf
Current CPU governor scaling settings:
  CPU 0: powersave
  CPU 1: powersave
  CPU 2: powersave
  CPU 3: powersave
New CPU governor scaling settings:
  CPU 0: performance
  CPU 1: performance
  CPU 2: performance
  CPU 3: performance
</screen>
    <para>TODO: We are not aware of a similar script for AIX. In fact we don't know how to check a simialr setting to determine if a script is needed.</para>
  </section>
  <section id="perf_comparison">
    <title>Comparison</title>
    <para>The table below presents benchmark statistics using standard C++, C++ with built-ins, and assembly language routines. The measurements were taken on <systemitem>gcc112</systemitem>, which is a Linux PowerPC, 64-bit, little-endian machine. The hardware is IBM POWER System S822 with two CPU cards. <systemitem>gcc112</systemitem> has 160 logical CPUs and runs at 3.4 GHz. The OS is CentOS 7.4, the kernel is <systemitem>3.10.0-514</systemitem>, and the compiler string is <systemitem>g++ (GCC) 4.8.5 20150623 (Red Hat 4.8.5-16)</systemitem>.</para>
    <informaltable frame="all">
      <tgroup align="center" cols="7">
        <colspec colname="c1" colwidth="1.5in"/>
        <colspec colname="c2" colwidth="0.75in"/>
        <colspec colname="c3" colwidth="0.75in"/>
        <colspec colname="c4" colwidth="0.75in"/>
        <colspec colname="c5" colwidth="0.75in"/>
        <colspec colname="c6" colwidth="0.75in"/>
        <colspec colname="c7" colwidth="0.75in"/>
        <thead>
          <row>
            <entry morerows="1" valign="middle">Algorithm</entry>
            <entry namest="c2" nameend="c3" align="center">Standard C++</entry>
            <entry namest="c4" nameend="c5" align="center">Built-ins</entry>
            <entry namest="c6" nameend="c7" align="center">Assembly</entry>
          </row>
          <row>
            <!-- <entry>Algorithm</entry> -->
            <entry>MiB/s</entry>
            <entry>cpb</entry>
            <entry>MiB/s</entry>
            <entry>cpb</entry>
            <entry>MiB/s</entry>
            <entry>cpb</entry>
          </row>
        </thead>
        <tbody>
          <row>
            <entry>AES/ECB</entry>
            <entry>121</entry>
            <entry>26.7</entry>
            <entry>3151</entry>
            <entry>1.03</entry>
          </row>
          <row>
            <entry>AES/CTR</entry>
            <entry>120</entry>
            <entry>27.1</entry>
            <entry>2544</entry>
            <entry>1.27</entry>
          </row>
          <row>
            <entry>AES/GCM</entry>
            <entry>93</entry>
            <entry>34.7</entry>
            <entry>474</entry>
            <entry>6.8</entry>
            <entry>-</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>SHA-1</entry>
            <entry>108</entry>
            <entry>30.0</entry>
            <entry>-</entry>
            <entry>-</entry>
            <entry>-</entry>
            <entry>-</entry>
          </row>
          <row>
            <entry>SHA-256</entry>
            <entry>138</entry>
            <entry>23.5</entry>
            <entry>244</entry>
            <entry>13.3</entry>
            <entry>325</entry>
            <entry>9.9</entry>
          </row>
          <row>
            <entry>SHA-512</entry>
            <entry>220</entry>
            <entry>15.0</entry>
            <entry>341</entry>
            <entry>9.5</entry>
            <entry>725</entry>
            <entry>6.3</entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </section>
  <section id="perf_zzz">
    <title>ZZZ</title>
    <para/>
  </section>
</chapter>
